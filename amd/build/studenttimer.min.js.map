{"version":3,"file":"studenttimer.min.js","sources":["../src/studenttimer.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Countdown time the students have for answering the question. The timer can also be stopped by the teacher.\n *\n * @module     quizaccess_tcquiz\n * @copyright  2024 Capilano University\n * @author     Tamara Dakic <tdakic@capilanou.ca>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {get_string as getString} from 'core/str';\nimport Notification from 'core/notification';\nimport $ from 'jquery';\n\nconst Selectors = {\n    regions: {\n        timeLeft: '[data-region=\"quizaccess_tcquiz/timeleft_span\"]',\n },\n};\n\nconst registerEventListeners = (sessionid, quizid, cmid, attemptid, page, time_for_question, POLLING_INTERVAL) => {\n//the timer can be stoped either by the teacher or expired time -- handle both events\n//enough to check when the state of the quiz has changed to show results (30)\n\n//the submit button is clickable twice causing problems\n//name=\"responseformsubmit\" value=\"Submit\" class=\"mod_quiz-next-nav btn btn-primary\"\n//id=\"responseformsubmit\" formaction=\"http://localhost/moodle/mod/quiz/accessrule/tcquiz/processattempt.php?\n\n    /*does nothing\n    $(document).ready(function(){\n       $(\"responseform\").submit(function() {\n              $(this).submit(function() {\n                  return false;\n              });\n              return true;\n          });\n    });*/\n\n    $('#responseform').on('submit', function () {\n        $('#responseformsubmit').attr('disabled', 'disabled');\n    });\n\n    //this should prevent \"Unsaved changes\" pop-up which might happen if the student typed something\n    //but didn't click submit\n    window.addEventListener('beforeunload', function (event) {\n      event.stopImmediatePropagation();\n    });\n\n    var timeLeft = time_for_question; //+1 to wait for everyone?\n    var timeLeft_html = document.querySelector(Selectors.regions.timeLeft);\n    var teacherEndedQuestion = false;\n\n    //timer\n    var timer = setInterval(function() {\n        timeLeft--;\n        timeLeft_html.innerHTML = timeLeft;\n        if (timeLeft <= 0 || teacherEndedQuestion){\n          clearInterval(timer);\n          clearInterval(tecaherEndedQuestionEvent);\n          timer = null;\n          timeLeft_html.innerHTML = 0;\n          window.goToCurrentQuizPageEvent = setInterval(async () =>\n            {await go_to_current_quiz_page(sessionid, quizid, cmid, attemptid);}, POLLING_INTERVAL);\n        }\n    }, 1000);\n\n    //checks for teacher ending the question event\n    const tecaherEndedQuestionEvent = setInterval(async function() {\n      teacherEndedQuestion = await check_question_state(sessionid, quizid, cmid, attemptid);\n    }, POLLING_INTERVAL); //1000 means 1 sec, 5000 means 5 seconds\n\n};\n\n/**\n * Checks if the teacher stopped the question\n * @param {sessionid} sessionid The id of the current session.\n * @param {quizid} quizid The quizid of the current quiz.\n * @param {cmid} cmid Course module id of the current quiz.\n * @param {attemptid} attemptid The attemptid of the teacher's attempt.\n * @return true if the question was stopped by the teacher, false otherwise\n */\nasync function check_question_state(sessionid, quizid, cmid, attemptid) {\n\n  var  result = await fetch(M.cfg.wwwroot+'/mod/quiz/accessrule/tcquiz/get_question_state.php?quizid='\n    +quizid+'&sessionid='+sessionid+'&cmid='+ cmid +'&attempt='+attemptid\n    +'&sesskey='+ M.cfg.sesskey,{method: 'POST'});\n\n  var response_xml_text = await result.text();\n\n  return response_xml_text == \"0\";\n\n}\n\n/**\n * When time is up or the teacher stopped the question, go to the next page of the quiz.\n * That page should only be the result's page or the final result's page\n * but the method is coded more generally in case of teacher control improvements\n * @param {sessionid} sessionid The id of the current session.\n * @param {quizid} quizid The quizid of the current quiz.\n * @param {cmid} cmid Course module id of the current quiz.\n * @param {attemptid} attemptid The attemptid of the teacher's attempt.\n*/\nasync function go_to_current_quiz_page(sessionid, quizid, cmid, attemptid) {\n\n  var  result = await fetch(M.cfg.wwwroot+'/mod/quiz/accessrule/tcquiz/quizdatastudent.php?quizid='\n    +quizid+'&sessionid='+sessionid+'&cmid='+ cmid +'&attempt='+attemptid\n    +'&sesskey='+ M.cfg.sesskey,{method: 'POST'});\n\n  var response_xml_text = await result.text();\n\n  await update_quiz_page(response_xml_text);\n\n}\n\n/**\n* Helper function to parse a response from the server and go to the specified url.\n* same function is in waitforquestion.js - leave for now in case more events added\n* @param {string} response_xml_text The XML returned by quizdatastudent.php\n */\nfunction update_quiz_page(response_xml_text) {\n\n  const parser = new DOMParser();\n  const response_xml = parser.parseFromString(response_xml_text, 'text/html');\n\n  var quizresponse = response_xml.getElementsByTagName('tcquiz').item(0);\n\n  //ERROR handling?\n\n  if (quizresponse === null) {\n    Notification.addNotification({\n        message: getString('invalidserverresponse', 'quizaccess_tcquiz'),\n        type: 'error'\n    });\n    return;\n\n  } else {\n\n    var quizstatus = quizresponse.getElementsByTagName('status').item(0).textContent;\n\n    if (quizstatus == 'showquestion') {\n\n        //you should be on this page, so do nothing\n        //window.goToCurrentQuizPageEvent = null;\n        //clearInterval(window.goToCurrentQuizPageEvent);\n        //var attempt_url = quizresponse.getElementsByTagName('url').item(0).textContent;\n        //window.location.replace(attempt_url);\n\n    } else if (quizstatus == 'showresults') {\n\n        window.goToCurrentQuizPageEvent = null;\n        clearInterval(window.goToCurrentQuizPageEvent);\n        var result_url = quizresponse.getElementsByTagName('url').item(0).textContent;\n        window.location.replace(result_url);\n\n    } else if (quizstatus == 'finalresults') {\n\n      window.goToCurrentQuizPageEvent = null;\n      clearInterval(window.goToCurrentQuizPageEvent);\n\n    } else if (quizstatus == 'quiznotrunning' || quizstatus == 'waitforquestion'|| quizstatus == 'waitforresults' ||\n            quizstatus == 'noaction' ){\n            //keep trying\n\n    } else if (quizstatus == 'error') {\n      var errmsg = quizresponse.getElementsByTagName('message').item(0).textContent;\n\n      Notification.addNotification({\n          message: errmsg,\n          type: 'error'\n      });\n\n    }\n    else{\n      Notification.addNotification({\n          message: getString('unknownserverresponse', 'quizaccess_tcquiz') + quizstatus,\n          type: 'error'\n      });\n\n    }\n  }\n\n}\n\nexport const init = (sessionid, quizid, cmid, attemptid, page, time_for_question, POLLING_INTERVAL) => {\n\n  registerEventListeners(sessionid, quizid, cmid, attemptid, page, time_for_question, POLLING_INTERVAL);\n};\n"],"names":["_interopRequireDefault","obj","__esModule","default","_notification","_jquery","Selectors","timeLeft","registerEventListeners","sessionid","quizid","cmid","attemptid","page","time_for_question","POLLING_INTERVAL","$","on","attr","window","addEventListener","event","stopImmediatePropagation","timeLeft_html","document","querySelector","teacherEndedQuestion","timer","setInterval","innerHTML","clearInterval","tecaherEndedQuestionEvent","goToCurrentQuizPageEvent","async","result","fetch","M","cfg","wwwroot","sesskey","method","response_xml_text","text","response_xml","DOMParser","parseFromString","quizresponse","getElementsByTagName","item","Notification","addNotification","message","getString","type","quizstatus","textContent","result_url","location","replace","errmsg","update_quiz_page","go_to_current_quiz_page","check_question_state","_exports","init"],"mappings":"2IA0BuB,SAAAA,uBAAAC,YAAAA,KAAAA,IAAAC,WAAAD,KAAAE,QAAAF;;;;;;;;kFADvBG,cAAAJ,uBAAAI,eACAC,QAAAL,uBAAAK,SAEA,MAAMC,kBACO,CACLC,SAAU,mDAIZC,uBAAyBA,CAACC,UAAWC,OAAQC,KAAMC,UAAWC,KAAMC,kBAAmBC,qBAkBzF,EAAAC,iBAAE,iBAAiBC,GAAG,UAAU,YAC5B,EAAAD,iBAAE,uBAAuBE,KAAK,WAAY,eAK9CC,OAAOC,iBAAiB,gBAAgB,SAAUC,OAChDA,MAAMC,8BAGR,IAAIf,SAAWO,kBACXS,cAAgBC,SAASC,cAAcnB,kBAAkBC,UACzDmB,sBAAuB,EAGvBC,MAAQC,aAAY,WACpBrB,WACAgB,cAAcM,UAAYtB,UACtBA,UAAY,GAAKmB,wBACnBI,cAAcH,OACdG,cAAcC,2BACdJ,MAAQ,KACRJ,cAAcM,UAAY,EAC1BV,OAAOa,yBAA2BJ,aAAYK,gBAyCxDA,eAAuCxB,UAAWC,OAAQC,KAAMC,WAE9D,IAAKsB,aAAeC,MAAMC,EAAEC,IAAIC,QAAQ,0DACrC5B,OAAO,cAAcD,UAAU,SAAUE,KAAM,YAAYC,UAC3D,YAAawB,EAAEC,IAAIE,QAAQ,CAACC,OAAQ,SAEnCC,wBAA0BP,OAAOQ,aAWvC,SAA0BD,mBAExB,MACME,cADS,IAAIC,WACSC,gBAAgBJ,kBAAmB,aAE/D,IAAIK,aAAeH,aAAaI,qBAAqB,UAAUC,KAAK,GAIpE,GAAqB,OAAjBF,aAKF,YAJAG,sBAAaC,gBAAgB,CACzBC,SAAS,EAAAC,iBAAU,wBAAyB,qBAC5CC,KAAM,UAMV,IAAIC,WAAaR,aAAaC,qBAAqB,UAAUC,KAAK,GAAGO,YAErE,GAAkB,gBAAdD,iBAQG,GAAkB,eAAdA,WAA6B,CAEpCnC,OAAOa,yBAA2B,KAClCF,cAAcX,OAAOa,0BACrB,IAAIwB,WAAaV,aAAaC,qBAAqB,OAAOC,KAAK,GAAGO,YAClEpC,OAAOsC,SAASC,QAAQF,iBAErB,GAAkB,gBAAdF,WAETnC,OAAOa,yBAA2B,KAClCF,cAAcX,OAAOa,+BAEhB,GAAkB,kBAAdsB,YAAgD,mBAAdA,YAAgD,kBAAdA,YACzD,YAAdA,iBAGD,GAAkB,SAAdA,WAAuB,CAChC,IAAIK,OAASb,aAAaC,qBAAqB,WAAWC,KAAK,GAAGO,YAElEN,sBAAaC,gBAAgB,CACzBC,QAASQ,OACTN,KAAM,eAKVJ,sBAAaC,gBAAgB,CACzBC,SAAS,EAAAC,iBAAU,wBAAyB,qBAAuBE,WACnED,KAAM,UAjERO,CAAiBnB,mBAhDNoB,CAAwBpD,UAAWC,OAAQC,KAAMC,UAAU,GAAIG,qBAE3E,KAGH,MAAMgB,0BAA4BH,aAAYK,iBAC5CP,2BAaNO,eAAoCxB,UAAWC,OAAQC,KAAMC,WAE3D,IAAKsB,aAAeC,MAAMC,EAAEC,IAAIC,QAAQ,6DACrC5B,OAAO,cAAcD,UAAU,SAAUE,KAAM,YAAYC,UAC3D,YAAawB,EAAEC,IAAIE,QAAQ,CAACC,OAAQ,SAIvC,MAA4B,WAFEN,OAAOQ,OAnBJoB,CAAqBrD,UAAWC,OAAQC,KAAMC,aAC1EG,iBAAiB,EAqHtBgD,SAAAC,KAHkBA,CAACvD,UAAWC,OAAQC,KAAMC,UAAWC,KAAMC,kBAAmBC,oBAEhFP,uBAAuBC,UAAWC,OAAQC,KAAMC,UAAWC,EAAMC,kBAAmBC,iBAAiB,CACrG"}