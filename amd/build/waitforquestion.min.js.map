{"version":3,"file":"waitforquestion.min.js","sources":["../src/waitforquestion.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Redirects a student to the current quiz page. Used when the student\n * joins the quiz.\n *\n * @module     quizaccess_tcquiz\n * @copyright  2024 Capilano University\n * @author     Tamara Dakic <tdakic@capilanou.ca>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Notification from 'core/notification';\nimport {get_string as getString} from 'core/str';\n\nconst registerEventListeners = (sessionid, quizid, cmid, attemptid,POLLING_INTERVAL) => {\n  //polling event that determines when the state of the tcquiz has changed\n  window.goToCurrentQuizPageEvent = setInterval(async () =>\n    {await go_to_current_quiz_page(sessionid, quizid, cmid, attemptid);}, POLLING_INTERVAL);\n};\n\nexport const init = (sessionid, quizid, cmid, attemptid, POLLING_INTERVAL) => {\n  registerEventListeners(sessionid, quizid, cmid, attemptid, POLLING_INTERVAL);\n};\n\n/**\n * Go to the current page of the quiz which is detrmined by quizdatastudent.php querrying db.\n * The page can be one of the following: attempt page, results page or final results page. This function\n * is also used when the student joins the quiz late.\n * @param {sessionid} sessionid The id of the current session.\n * @param {quizid} quizid The quizid of the current quiz.\n * @param {cmid} cmid Course module id of the current quiz.\n * @param {attemptid} attemptid The attemptid of the student's attempt.\n */\nasync function go_to_current_quiz_page(sessionid, quizid, cmid, attemptid) {\n\n  var  result = await fetch(M.cfg.wwwroot+'/mod/quiz/accessrule/tcquiz/quizdatastudent.php?quizid='\n    +quizid+'&sessionid='+sessionid+'&cmid='+ cmid +'&attempt='+attemptid\n    +'&sesskey='+ M.cfg.sesskey,{method: 'POST'});\n\n  var response_xml_text = await result.text();\n\n  await update_quiz_page(response_xml_text);\n\n}\n\n/**\n * Helper function to parse a response from the server and go to the specified url.\n * @param {string} response_xml_text The XML returned by quizdatateacher.php\n */\nfunction update_quiz_page(response_xml_text) {\n\n        const parser = new DOMParser();\n        const response_xml = parser.parseFromString(response_xml_text, 'text/html');\n\n        var quizresponse = response_xml.getElementsByTagName('tcquiz').item(0);\n\n        if (quizresponse === null) {\n            Notification.addNotification({\n                message: getString('invalidserverresponse', 'quizaccess_tcquiz'),\n                type: 'error'\n            });\n            return;\n\n        } else {\n\n          var quizstatus = quizresponse.getElementsByTagName('status').item(0).textContent;\n\n          if (quizstatus == 'showquestion') {\n\n            window.goToCurrentQuizPageEvent = null;\n            clearInterval(window.goToCurrentQuizPageEvent);\n            var attempt_url = quizresponse.getElementsByTagName('url').item(0).textContent;\n            window.location.replace(attempt_url);\n\n          }\n          else if (quizstatus == 'showresults') {\n\n            window.goToCurrentQuizPageEvent = null;\n            clearInterval(window.goToCurrentQuizPageEvent);\n            var result_url = quizresponse.getElementsByTagName('url').item(0).textContent;\n            window.location.replace(result_url);\n          }\n          else if (quizstatus == 'finalresults') {\n             window.goToCurrentQuizPageEvent = null;\n             clearInterval(window.goToCurrentQuizPageEvent);\n             var result_url = quizresponse.getElementsByTagName('url').item(0).textContent;\n             window.location.replace(result_url);\n          }\n          else if (quizstatus == 'quiznotrunning' || quizstatus == 'waitforquestion'|| quizstatus == 'waitforresults' ||\n                quizstatus == 'noaction' ){\n                //keep trying\n          }\n          else if (quizstatus == 'error') {\n              var errmsg = quizresponse.getElementsByTagName('message').item(0).textContent;\n\n              Notification.addNotification({\n                  message: errmsg,\n                  type: 'error'\n              });\n          }\n          else{\n              Notification.addNotification({\n                  message: getString('unknownserverresponse', 'quizaccess_tcquiz') + quizstatus,\n                  type: 'error'\n              });\n          }\n        }\n}\n"],"names":["obj","_notification","__esModule","default","registerEventListeners","sessionid","quizid","cmid","attemptid","POLLING_INTERVAL","window","goToCurrentQuizPageEvent","setInterval","async","result","fetch","M","cfg","wwwroot","sesskey","method","response_xml_text","text","response_xml","DOMParser","parseFromString","quizresponse","getElementsByTagName","item","Notification","addNotification","message","getString","type","quizstatus","textContent","clearInterval","attempt_url","location","replace","result_url","errmsg","update_quiz_page","go_to_current_quiz_page","_exports","init"],"mappings":"6HAyB6C,IAAAA;;;;;;;;;kFAA7CC,eAA6CD,IAA7CC,gBAA6CD,IAAAE,WAAAF,KAAAG,QAAAH,KAG7C,MAAMI,uBAAyBA,CAACC,UAAWC,OAAQC,KAAMC,UAAUC,oBAEjEC,OAAOC,yBAA2BC,aAAYC,gBAiBhDA,eAAuCR,UAAWC,OAAQC,KAAMC,WAE9D,IAAKM,aAAeC,MAAMC,EAAEC,IAAIC,QAAQ,0DACrCZ,OAAO,cAAcD,UAAU,SAAUE,KAAM,YAAYC,UAC3D,YAAaQ,EAAEC,IAAIE,QAAQ,CAACC,OAAQ,SAEnCC,wBAA0BP,OAAOQ,aAUvC,SAA0BD,mBAElB,MACME,cADS,IAAIC,WACSC,gBAAgBJ,kBAAmB,aAE/D,IAAIK,aAAeH,aAAaI,qBAAqB,UAAUC,KAAK,GAEpE,GAAqB,OAAjBF,aAKA,YAJAG,sBAAaC,gBAAgB,CACzBC,SAAS,EAAAC,iBAAU,wBAAyB,qBAC5CC,KAAM,UAMZ,IAAIC,WAAaR,aAAaC,qBAAqB,UAAUC,KAAK,GAAGO,YAErE,GAAkB,gBAAdD,WAA8B,CAEhCxB,OAAOC,yBAA2B,KAClCyB,cAAc1B,OAAOC,0BACrB,IAAI0B,YAAcX,aAAaC,qBAAqB,OAAOC,KAAK,GAAGO,YACnEzB,OAAO4B,SAASC,QAAQF,kBAGrB,GAAkB,eAAdH,WAA6B,CAEpCxB,OAAOC,yBAA2B,KAClCyB,cAAc1B,OAAOC,0BACrB,IAAI6B,WAAad,aAAaC,qBAAqB,OAAOC,KAAK,GAAGO,YAClEzB,OAAO4B,SAASC,QAAQC,iBAErB,GAAkB,gBAAdN,WAA8B,CACpCxB,OAAOC,yBAA2B,KAClCyB,cAAc1B,OAAOC,0BACjB6B,WAAad,aAAaC,qBAAqB,OAAOC,KAAK,GAAGO,YAClEzB,OAAO4B,SAASC,QAAQC,iBAEtB,GAAkB,kBAAdN,YAAgD,mBAAdA,YAAgD,kBAAdA,YACzD,YAAdA,iBAGD,GAAkB,SAAdA,WAAuB,CAC5B,IAAIO,OAASf,aAAaC,qBAAqB,WAAWC,KAAK,GAAGO,YAElEN,sBAAaC,gBAAgB,CACzBC,QAASU,OACTR,KAAM,eAIVJ,sBAAaC,gBAAgB,CACzBC,SAAS,EAAAC,iBAAU,wBAAyB,qBAAuBE,WACnED,KAAM,UA9DhBS,CAAiBrB,mBAxBdsB,CAAwBtC,UAAWC,OAAQC,KAAMC,UAAU,GAAIC,iBAAiB,EAKzFmC,SAAAC,KAFkBA,CAACxC,UAAWC,OAAQC,KAAMC,UAAWC,oBACvDL,uBAAuBC,UAAWC,OAAQC,KAAMC,UAAWC,iBAAiB,CAsF7E"}